From 803a48af47351366a13c1066c2049d3d8ec03767 Mon Sep 17 00:00:00 2001
From: "Uwe L. Korn" <uwelk@xhochy.com>
Date: Sun, 8 Oct 2023 19:34:34 +0200
Subject: [PATCH 1/2] Allow for custom CUDA build

---
 build/build.py       | 14 ++++++++++----
 build/tools/utils.py |  2 +-
 2 files changed, 11 insertions(+), 5 deletions(-)

diff --git a/build/build.py b/build/build.py
index 25a873d..a83aec6 100755
--- a/build/build.py
+++ b/build/build.py
@@ -515,6 +515,13 @@ async def main():
 
       if args.cuda_version:
         logging.debug("Hermetic CUDA version: %s", args.cuda_version)
+        # set GCC_HOST_COMPILER_PATH for toolchain with conda-forge
+        wheel_build_command.append(
+            f"--action_env=GCC_HOST_COMPILER_PATH=\"{os.environ['GCC']}\""
+        )
+        wheel_build_command.append(
+            f"--action_env=GCC_HOST_COMPILER_PREFIX=\"{os.path.dirname(os.environ['GCC'])}\""
+          )
         wheel_build_command.append(
             f"--repo_env=HERMETIC_CUDA_VERSION={args.cuda_version}"
         )
@@ -597,10 +604,9 @@ async def main():
 
       wheel_build_command.append(f"--jaxlib_git_hash={git_hash}")
 
-      result = await executor.run(wheel_build_command.get_command_as_string(), args.dry_run)
-      # Exit with error if any wheel build fails.
-      if result.return_code != 0:
-        raise RuntimeError(f"Command failed with return code {result.return_code}")
+      import subprocess
+      subprocess.check_call(wheel_build_command.get_command_as_string(),
+                            shell=True)
 
   # Exit with success if all wheels in the list were built successfully.
   sys.exit(0)
diff --git a/build/tools/utils.py b/build/tools/utils.py
index 5d7c8e0..1a4b26f 100644
--- a/build/tools/utils.py
+++ b/build/tools/utils.py
@@ -222,7 +222,7 @@ def get_githash():
         capture_output=True,
         check=True,
     ).stdout.strip()
-  except OSError:
+  except (subprocess.CalledProcessError, OSError):
     return ""
 
 def _parse_string_as_bool(s):
