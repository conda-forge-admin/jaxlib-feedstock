From d209bfd9298f14f2949366e7747a0f65da72d9d9 Mon Sep 17 00:00:00 2001
From: "Uwe L. Korn" <uwe.korn@quantco.com>
Date: Tue, 8 Oct 2024 12:57:07 +0000
Subject: [PATCH 4/4] Fix XLA_FFIR_REGISTER macros

---
 ..._FFI_REGISTER_-macros-global-qualifi.patch | 118 ++++++++++++++++++
 third_party/xla/workspace.bzl                 |   1 +
 2 files changed, 119 insertions(+)
 create mode 100644 third_party/xla/0005-PR-17477-Fix-XLA_FFI_REGISTER_-macros-global-qualifi.patch

diff --git a/third_party/xla/0005-PR-17477-Fix-XLA_FFI_REGISTER_-macros-global-qualifi.patch b/third_party/xla/0005-PR-17477-Fix-XLA_FFI_REGISTER_-macros-global-qualifi.patch
new file mode 100644
index 0000000..8fc06e0
--- /dev/null
+++ b/third_party/xla/0005-PR-17477-Fix-XLA_FFI_REGISTER_-macros-global-qualifi.patch
@@ -0,0 +1,118 @@
+From 6b73d321ad45ca86cba50a308f12215a6f96ee28 Mon Sep 17 00:00:00 2001
+From: Alexander Pivovarov <pivovaa@amazon.com>
+Date: Mon, 23 Sep 2024 00:35:34 -0700
+Subject: [PATCH 5/5] PR #17477: Fix XLA_FFI_REGISTER_ macros - global
+ qualification of class name is invalid
+
+Imported from GitHub PR https://github.com/openxla/xla/pull/17477
+
+Currently `bazel test //xla/ffi/api:ffi_test` fails with compilation error:
+```bash
+In file included from ./xla/ffi/api/ffi.h:48,
+                 from xla/ffi/api/ffi_test.cc:16:
+./xla/ffi/api/api.h:1774:38: error: global qualification of class name is invalid before '{' token
+ 1774 |   struct ::xla::ffi::AttrDecoding<T> {                                        \
+      |                                      ^
+xla/ffi/api/ffi_test.cc:71:1: note: in expansion of macro 'XLA_FFI_REGISTER_ENUM_ATTR_DECODING'
+   71 | XLA_FFI_REGISTER_ENUM_ATTR_DECODING(::xla::ffi::Int32BasedEnum);
+      | ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
+```
+
+To solve "global qualification of class name is invalid" issue we can add `namespace xla::ffi { ` block to the macros and remove `::xla::ffi::` prefix in struct decls inside `XLA_FFI_REGISTER_*` macros
+
+### Testing
+```
+bazel test //xla/ffi/...
+
+INFO: Build completed successfully, 47 total actions
+//xla/ffi:ffi_test                                                       PASSED in 0.5s
+//xla/ffi:call_frame_test                                                PASSED in 0.1s
+//xla/ffi:execution_context_test                                         PASSED in 0.1s
+//xla/ffi:execution_state_test                                           PASSED in 0.1s
+//xla/ffi:type_id_registry_test                                          PASSED in 0.1s
+//xla/ffi/api:ffi_test                                                   PASSED in 0.5s
+
+Executed 6 out of 6 tests: 6 tests pass.
+```
+
+### Related links:
+- https://github.com/openxla/xla/pull/15747
+- https://github.com/openxla/xla/commit/ef49d057bffd4b8ff14bda925d48ea7610aaa856
+
+Copybara import of the project:
+
+--
+fffa62b2d47feb915c0c6300b0af5540974911d4 by Alexander Pivovarov <pivovaa@amazon.com>:
+
+Fix XLA_FFI_REGISTER_ macros
+
+Merging this change closes #17477
+
+COPYBARA_INTEGRATE_REVIEW=https://github.com/openxla/xla/pull/17477 from apivovarov:fix_XLA_FFI_REGISTER_macro fffa62b2d47feb915c0c6300b0af5540974911d4
+PiperOrigin-RevId: 677666742
+---
+ xla/ffi/api/api.h | 20 ++++++++++++++------
+ 1 file changed, 14 insertions(+), 6 deletions(-)
+
+diff --git a/xla/ffi/api/api.h b/xla/ffi/api/api.h
+index 8e3774f45c..914a1a8697 100644
+--- a/xla/ffi/api/api.h
++++ b/xla/ffi/api/api.h
+@@ -1678,13 +1678,14 @@ auto DictionaryDecoder(Members... m) {
+ // binding specification inference from a callable signature.
+ //
+ #define XLA_FFI_REGISTER_STRUCT_ATTR_DECODING(T, ...)                         \
++  namespace xla::ffi {                                                        \
+   template <>                                                                 \
+-  struct ::xla::ffi::AttrsBinding<T> {                                        \
++  struct AttrsBinding<T> {                                                    \
+     using Attrs = T;                                                          \
+   };                                                                          \
+                                                                               \
+   template <>                                                                 \
+-  struct ::xla::ffi::AttrDecoding<T> {                                        \
++  struct AttrDecoding<T> {                                                    \
+     using Type = T;                                                           \
+     static std::optional<T> Decode(XLA_FFI_AttrType type, void* attr,         \
+                                    DiagnosticEngine& diagnostic) {            \
+@@ -1699,13 +1700,17 @@ auto DictionaryDecoder(Members... m) {
+           reinterpret_cast<const XLA_FFI_Attrs*>(attr),                       \
+           internal::StructMemberNames(__VA_ARGS__), diagnostic);              \
+     }                                                                         \
+-  }
++  };                                                                          \
++  } /* namespace xla::ffi */                                                  \
++  static_assert(std::is_class_v<::xla::ffi::AttrsBinding<T>>);                \
++  static_assert(std::is_class_v<::xla::ffi::AttrDecoding<T>>)
+ 
+ // Registers decoding for a user-defined enum class type. Uses enums underlying
+ // type to decode the attribute as a scalar value and cast it to the enum type.
+ #define XLA_FFI_REGISTER_ENUM_ATTR_DECODING(T)                                \
++  namespace xla::ffi {                                                        \
+   template <>                                                                 \
+-  struct ::xla::ffi::AttrDecoding<T> {                                        \
++  struct AttrDecoding<T> {                                                    \
+     using Type = T;                                                           \
+     using U = std::underlying_type_t<Type>;                                   \
+     static_assert(std::is_enum<Type>::value, "Expected enum class");          \
+@@ -1718,7 +1723,8 @@ auto DictionaryDecoder(Members... m) {
+       }                                                                       \
+                                                                               \
+       auto* scalar = reinterpret_cast<XLA_FFI_Scalar*>(attr);                 \
+-      auto expected_dtype = internal::NativeTypeToCApiDataType<U>();          \
++      auto expected_dtype =                                                   \
++          ::xla::ffi::internal::NativeTypeToCApiDataType<U>();                \
+       if (XLA_FFI_PREDICT_FALSE(scalar->dtype != expected_dtype)) {           \
+         return diagnostic.Emit("Wrong scalar data type: expected ")           \
+                << expected_dtype << " but got " << scalar->dtype;             \
+@@ -1727,7 +1733,9 @@ auto DictionaryDecoder(Members... m) {
+       auto underlying = *reinterpret_cast<U*>(scalar->value);                 \
+       return static_cast<Type>(underlying);                                   \
+     }                                                                         \
+-  };
++  };                                                                          \
++  } /* namespace xla::ffi */                                                  \
++  static_assert(std::is_class_v<::xla::ffi::AttrDecoding<T>>)
+ 
+ //===----------------------------------------------------------------------===//
+ // Helper macro for registering FFI implementations
diff --git a/third_party/xla/workspace.bzl b/third_party/xla/workspace.bzl
index 3b7afaf..013a020 100644
--- a/third_party/xla/workspace.bzl
+++ b/third_party/xla/workspace.bzl
@@ -35,6 +35,7 @@ def repo():
             "//third_party/xla:0002-Fix-abseil-headers.patch",
             "//third_party/xla:0003-Omit-usage-of-StrFormat.patch",
             "//third_party/xla:0004-Add-missing-bits-absl-systemlib.patch",
+	    "//third_party/xla:0005-PR-17477-Fix-XLA_FFI_REGISTER_-macros-global-qualifi.patch",
         ],
     )
 
